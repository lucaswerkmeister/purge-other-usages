#!/usr/bin/env python3
import mwapi
import os
import sys
import time
import toolforge

user_agent = toolforge.set_user_agent(
    tool='purge-other-usages',
    url='https://github.com/lucaswerkmeister/purge-other-usages',
    email='lucas.werkmeister@wikimedia.de',
)


try:
    wiki_domain = sys.argv[1]
    entity_id_offset = sys.argv[2]
    page_id_offset = int(sys.argv[3])
except IndexError:
    print(f'''
Usage: {sys.argv[0]} DOMAIN ENTITY_ID PAGE_ID

    DOMAIN: e.g. en.wikipedia.org
    ENTITY_ID: e.g. Q42; set to '' when not continuing
    PAGE_ID: e.g. 1234; set to 0 when not continuing
'''.strip(), file=sys.stderr)
    sys.exit(1)

session = mwapi.Session(host=f'https://{wiki_domain}',
                        user_agent=user_agent)

response = session.get(action='query',
                       meta=['siteinfo', 'tokens'],
                       siprop=['general'],
                       type='login')
login_token = response['query']['tokens']['logintoken']
wiki_db = response['query']['general']['wikiid']

try:
    session.post(action='login',
                 lgname=os.environ['MEDIAWIKI_USERNAME'],
                 lgpassword=os.environ['MEDIAWIKI_PASSWORD'],
                 lgtoken=login_token)
except KeyError:
    printf(f'''
MEDIAWIKI_USERNAME or MEDIAWIKI_PASSWORD not found in environment.

You must specify a bot password with the `basic` grant
in these environment variables.
'''.strip(), file=sys.stderr)
    sys.exit(1)

while True:
    connection = toolforge.connect(wiki_db)
    with connection.cursor() as cursor:
        cursor.execute('''SELECT eu_entity_id, eu_page_id
                          FROM wbc_entity_usage
                          WHERE eu_aspect = 'O'
                          AND (eu_entity_id > %s
                           OR (eu_entity_id = %s
                            AND eu_page_id > %s))
                          ORDER BY eu_entity_id ASC, eu_page_id ASC
                          LIMIT 500''',
                       (entity_id_offset, entity_id_offset, page_id_offset))
        rows = [(entity_id.decode('utf8'), page_id)
                for entity_id, page_id in cursor.fetchall()]
    connection.close()

    if not rows:
        break

    for chunk in [rows[i:i+30] for i in range(0, len(rows), 30)]:
        page_ids = list(set(page_id for _, page_id in chunk))
        session.post(action='purge',
                     forcelinkupdate=1,
                     pageids=page_ids)
        entity_id_offset, page_id_offset = chunk[-1]
        print(f'Processed up to {entity_id_offset}, {page_id_offset}.')
        # rate limit permits 30 purges per 60 seconds, +15s for some buffer
        time.sleep(75)

    break
